import {
  require_react_dom
} from "./chunk-BUQ3EWXL.js";
import {
  require_react
} from "./chunk-2UC5YKPU.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/yet-another-react-lightbox/dist/Lightbox.js
var React20 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/types.js
var LightboxDefaultProps = {
  open: false,
  close: () => {
  },
  index: 0,
  slides: [],
  render: {},
  plugins: [],
  toolbar: { buttons: ["close"] },
  labels: {},
  animation: {
    fade: 330,
    swipe: 500
  },
  carousel: {
    finite: false,
    preload: 2,
    padding: "16px",
    spacing: "30%",
    imageFit: "contain"
  },
  controller: {
    focus: true,
    aria: false,
    touchAction: "none",
    closeOnBackdropClick: false
  },
  on: {},
  styles: {},
  className: ""
};

// node_modules/yet-another-react-lightbox/dist/core/consts.js
var SLIDE_STATUS_LOADING = "loading";
var SLIDE_STATUS_PLAYING = "playing";
var SLIDE_STATUS_ERROR = "error";
var SLIDE_STATUS_COMPLETE = "complete";
var activeSlideStatus = (status) => `active-slide-${status}`;
var ACTIVE_SLIDE_LOADING = activeSlideStatus(SLIDE_STATUS_LOADING);
var ACTIVE_SLIDE_PLAYING = activeSlideStatus(SLIDE_STATUS_PLAYING);
var ACTIVE_SLIDE_ERROR = activeSlideStatus(SLIDE_STATUS_ERROR);
var ACTIVE_SLIDE_COMPLETE = activeSlideStatus(SLIDE_STATUS_COMPLETE);
var YARL_EVENT_BACKDROP_CLICK = "backdrop_click";

// node_modules/yet-another-react-lightbox/dist/core/utils.js
var React = __toESM(require_react(), 1);
var clsx = (...classes) => [...classes].filter((cls) => Boolean(cls)).join(" ");
var cssPrefix = "yarl__";
var cssClass = (name) => `${cssPrefix}${name}`;
var cssVar = (name) => `--${cssPrefix}${name}`;
var label = (labels, lbl) => labels && labels[lbl] ? labels[lbl] : lbl;
var cleanup = (...cleaners) => () => {
  cleaners.forEach((cleaner) => {
    cleaner();
  });
};
var makeUseContext = (name, contextName, context) => () => {
  const ctx = React.useContext(context);
  if (!ctx) {
    throw new Error(`${name} must be used within a ${contextName}.Provider`);
  }
  return ctx;
};
var hasWindow = () => typeof window !== "undefined";
var isDefined = (x) => typeof x !== "undefined";

// node_modules/yet-another-react-lightbox/dist/core/config.js
var createModule = (name, component) => ({
  name,
  component
});
var createNode = (module, children) => ({
  module,
  children
});
var traverseNode = (node, target, apply) => {
  if (node.module.name === target) {
    return apply(node);
  }
  if (node.children) {
    return [
      createNode(node.module, node.children.flatMap((n) => {
        var _a;
        return (_a = traverseNode(n, target, apply)) !== null && _a !== void 0 ? _a : [];
      }))
    ];
  }
  return [node];
};
var traverse = (nodes, target, apply) => nodes.flatMap((node) => {
  var _a;
  return (_a = traverseNode(node, target, apply)) !== null && _a !== void 0 ? _a : [];
});
var withPlugins = (root, plugins) => {
  let config = root;
  const augmentations = [];
  const contains = (target) => {
    const nodes = [...config];
    while (nodes.length > 0) {
      const node = nodes.pop();
      if ((node === null || node === void 0 ? void 0 : node.module.name) === target)
        return true;
      if (node === null || node === void 0 ? void 0 : node.children)
        nodes.push(...node.children);
    }
    return false;
  };
  const addParent = (target, module) => {
    if (target === "") {
      config = [createNode(module, config)];
      return;
    }
    config = traverse(config, target, (node) => [createNode(module, [node])]);
  };
  const append = (target, module) => {
    config = traverse(config, target, (node) => [createNode(node.module, [createNode(module, node.children)])]);
  };
  const addChild = (target, module, precede) => {
    config = traverse(config, target, (node) => {
      var _a;
      return [
        createNode(node.module, [
          ...precede ? [createNode(module)] : [],
          ...(_a = node.children) !== null && _a !== void 0 ? _a : [],
          ...!precede ? [createNode(module)] : []
        ])
      ];
    });
  };
  const addSibling = (target, module, precede) => {
    config = traverse(config, target, (node) => [
      ...precede ? [createNode(module)] : [],
      node,
      ...!precede ? [createNode(module)] : []
    ]);
  };
  const replace = (target, module) => {
    config = traverse(config, target, (node) => [createNode(module, node.children)]);
  };
  const remove = (target) => {
    config = traverse(config, target, (node) => node.children);
  };
  const augment = (augmentation) => {
    augmentations.push(augmentation);
  };
  plugins === null || plugins === void 0 ? void 0 : plugins.forEach((plugin) => {
    plugin({
      contains,
      addParent,
      append,
      addChild,
      addSibling,
      replace,
      remove,
      augment
    });
  });
  return {
    config,
    augmentation: (props) => augmentations.reduce((acc, augmentation) => augmentation(acc), props)
  };
};

// node_modules/yet-another-react-lightbox/dist/core/hooks/useContainerRect.js
var React2 = __toESM(require_react(), 1);
var useContainerRect = () => {
  const [containerRect, setContainerRect] = React2.useState();
  const containerRef = React2.useRef(null);
  const observerRef = React2.useRef();
  const setContainerRef = React2.useCallback((node) => {
    containerRef.current = node;
    if (observerRef.current) {
      observerRef.current.disconnect();
      observerRef.current = void 0;
    }
    const updateContainerRect = () => {
      if (node) {
        const styles = window.getComputedStyle(node);
        const parse = (value) => parseFloat(value) || 0;
        setContainerRect({
          width: Math.round(node.clientWidth - parse(styles.paddingLeft) - parse(styles.paddingRight)),
          height: Math.round(node.clientHeight - parse(styles.paddingTop) - parse(styles.paddingBottom))
        });
      } else {
        setContainerRect(void 0);
      }
    };
    updateContainerRect();
    if (node && typeof ResizeObserver !== "undefined") {
      observerRef.current = new ResizeObserver(updateContainerRect);
      observerRef.current.observe(node);
    }
  }, []);
  return React2.useMemo(() => ({
    setContainerRef,
    containerRef,
    containerRect
  }), [setContainerRef, containerRef, containerRect]);
};

// node_modules/yet-another-react-lightbox/dist/core/hooks/useLayoutEffect.js
var React3 = __toESM(require_react(), 1);
var useLayoutEffect2 = hasWindow() ? React3.useLayoutEffect : React3.useEffect;

// node_modules/yet-another-react-lightbox/dist/core/hooks/useLatest.js
var React4 = __toESM(require_react(), 1);
var useLatest = (value) => {
  const ref = React4.useRef(value);
  ref.current = value;
  return ref;
};

// node_modules/yet-another-react-lightbox/dist/core/hooks/useMotionPreference.js
var React5 = __toESM(require_react(), 1);
var useMotionPreference = () => {
  const [reduceMotion, setReduceMotion] = React5.useState(false);
  useLayoutEffect2(() => {
    var _a;
    const mediaQuery = (_a = window.matchMedia) === null || _a === void 0 ? void 0 : _a.call(window, "(prefers-reduced-motion: reduce)");
    setReduceMotion(mediaQuery === null || mediaQuery === void 0 ? void 0 : mediaQuery.matches);
    const listener = () => setReduceMotion(mediaQuery.matches);
    mediaQuery === null || mediaQuery === void 0 ? void 0 : mediaQuery.addEventListener("change", listener);
    return () => mediaQuery === null || mediaQuery === void 0 ? void 0 : mediaQuery.removeEventListener("change", listener);
  }, []);
  return reduceMotion;
};

// node_modules/yet-another-react-lightbox/dist/core/hooks/useRTL.js
var React6 = __toESM(require_react(), 1);
var useRTL = () => {
  const [isRTL, setIsRTL] = React6.useState(false);
  useLayoutEffect2(() => {
    setIsRTL(window.getComputedStyle(window.document.documentElement).direction === "rtl");
  }, []);
  return isRTL;
};

// node_modules/yet-another-react-lightbox/dist/core/hooks/useSensors.js
var React7 = __toESM(require_react(), 1);
var useSensors = () => {
  const [subscribers] = React7.useState({});
  return React7.useMemo(() => {
    const notifySubscribers = (type, event) => {
      var _a;
      (_a = subscribers[type]) === null || _a === void 0 ? void 0 : _a.forEach((listener) => {
        if (!event.isPropagationStopped())
          listener(event);
      });
    };
    return {
      registerSensors: {
        onPointerDown: (event) => notifySubscribers("onPointerDown", event),
        onPointerMove: (event) => notifySubscribers("onPointerMove", event),
        onPointerUp: (event) => notifySubscribers("onPointerUp", event),
        onPointerLeave: (event) => notifySubscribers("onPointerLeave", event),
        onPointerCancel: (event) => notifySubscribers("onPointerCancel", event),
        onTouchStart: (event) => notifySubscribers("onTouchStart", event),
        onTouchMove: (event) => notifySubscribers("onTouchMove", event),
        onTouchEnd: (event) => notifySubscribers("onTouchEnd", event),
        onTouchCancel: (event) => notifySubscribers("onTouchCancel", event),
        onKeyDown: (event) => notifySubscribers("onKeyDown", event),
        onKeyUp: (event) => notifySubscribers("onKeyUp", event),
        onWheel: (event) => notifySubscribers("onWheel", event)
      },
      subscribeSensors: (type, callback) => {
        if (!subscribers[type]) {
          subscribers[type] = [];
        }
        subscribers[type].unshift(callback);
        return () => {
          const listeners = subscribers[type];
          if (listeners) {
            listeners.splice(0, listeners.length, ...listeners.filter((el) => el !== callback));
          }
        };
      }
    };
  }, [subscribers]);
};

// node_modules/yet-another-react-lightbox/dist/core/contexts/Events.js
var React8 = __toESM(require_react(), 1);
var EventsContext = React8.createContext(null);
var useEvents = makeUseContext("useEvents", "EventsContext", EventsContext);
var EventsProvider = ({ children }) => {
  const subscriptions = React8.useRef({});
  const unsubscribe = (topic, callback) => {
    if (subscriptions.current[topic]) {
      subscriptions.current[topic] = subscriptions.current[topic].filter((cb) => cb !== callback);
    }
  };
  const subscribe = (topic, callback) => {
    if (!subscriptions.current[topic]) {
      subscriptions.current[topic] = [];
    }
    subscriptions.current[topic].push(callback);
    return () => unsubscribe(topic, callback);
  };
  const publish = (topic, event) => {
    var _a;
    (_a = subscriptions.current[topic]) === null || _a === void 0 ? void 0 : _a.forEach((callback) => callback(topic, event));
  };
  React8.useEffect(() => () => {
    subscriptions.current = {};
  }, []);
  const context = React8.useRef({
    subscribe,
    unsubscribe,
    publish
  });
  return React8.createElement(EventsContext.Provider, { value: context.current }, children);
};

// node_modules/yet-another-react-lightbox/dist/core/contexts/Timeouts.js
var React9 = __toESM(require_react(), 1);
var TimeoutsContext = React9.createContext(null);
var useTimeouts = makeUseContext("useTimeouts", "TimeoutsContext", TimeoutsContext);
var TimeoutsProvider = ({ children }) => {
  const timeouts = React9.useRef([]);
  const removeTimeout = (id) => {
    timeouts.current.splice(0, timeouts.current.length, ...timeouts.current.filter((tid) => tid !== id));
  };
  const setTimeout = (func, time) => {
    const id = window.setTimeout(() => {
      removeTimeout(id);
      func();
    }, time);
    timeouts.current.push(id);
    return id;
  };
  const clearTimeout = (id) => {
    if (isDefined(id)) {
      removeTimeout(id);
      window.clearTimeout(id);
    }
  };
  const clearTimeouts = () => {
    timeouts.current.forEach((tid) => window.clearTimeout(tid));
    timeouts.current.splice(0, timeouts.current.length);
  };
  React9.useEffect(() => () => clearTimeouts(), []);
  const context = React9.useRef({
    setTimeout,
    clearTimeout,
    clearTimeouts
  });
  return React9.createElement(TimeoutsContext.Provider, { value: context.current }, children);
};

// node_modules/yet-another-react-lightbox/dist/core/components/IconButton.js
var React11 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/core/modules/Controller.js
var React10 = __toESM(require_react(), 1);
var SWIPE_OFFSET_THRESHOLD = 30;
var ControllerContext = React10.createContext(null);
var useController = makeUseContext("useController", "ControllerContext", ControllerContext);
var Controller = ({ children, ...props }) => {
  const { containerRef, setContainerRef, containerRect } = useContainerRect();
  const { registerSensors, subscribeSensors } = useSensors();
  const { subscribe, publish } = useEvents();
  const { setTimeout, clearTimeout } = useTimeouts();
  const isRTL = useLatest(useRTL());
  const [state, setState] = React10.useState({
    currentIndex: props.index,
    globalIndex: props.index
  });
  const latestProps = useLatest(props);
  const refs = React10.useRef({
    state,
    props,
    swipeOffset: 0,
    swipeIntent: 0,
    swipeAnimationDuration: props.animation.swipe,
    wheelResidualMomentum: 0,
    pointers: []
  });
  refs.current.state = state;
  refs.current.props = props;
  useLayoutEffect2(() => {
    const preventDefault = (event) => {
      if (Math.abs(event.deltaX) > Math.abs(event.deltaY) || event.ctrlKey) {
        event.preventDefault();
      }
    };
    const node = containerRef.current;
    if (node) {
      node.addEventListener("wheel", preventDefault, { passive: false });
    }
    return () => {
      if (node) {
        node.removeEventListener("wheel", preventDefault);
      }
    };
  }, [containerRef]);
  React10.useEffect(() => {
    var _a;
    if (refs.current.props.controller.focus) {
      (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [containerRef, refs]);
  React10.useEffect(() => {
    var _a, _b;
    (_b = (_a = refs.current.props.on).view) === null || _b === void 0 ? void 0 : _b.call(_a, state.currentIndex);
  }, [state.currentIndex]);
  const updateSwipeOffset = React10.useCallback(() => {
    var _a, _b;
    const offsetVar = cssVar("swipe_offset");
    if (refs.current.swipeOffset !== 0) {
      (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.style.setProperty(offsetVar, `${Math.round(refs.current.swipeOffset)}px`);
    } else {
      (_b = containerRef.current) === null || _b === void 0 ? void 0 : _b.style.removeProperty(offsetVar);
    }
  }, [containerRef]);
  useLayoutEffect2(() => {
    updateSwipeOffset();
  });
  const rerender = React10.useCallback(() => {
    setState((prev) => ({ ...prev }));
  }, []);
  const resetSwipe = React10.useCallback(() => {
    const { current } = refs;
    current.swipeOffset = 0;
    current.swipeIntent = 0;
    current.swipeStartTime = void 0;
    clearTimeout(current.swipeResetCleanup);
    current.swipeResetCleanup = void 0;
    clearTimeout(current.swipeIntentCleanup);
    current.swipeIntentCleanup = void 0;
  }, [clearTimeout]);
  const rtl = React10.useCallback((value) => (isRTL.current ? -1 : 1) * (typeof value === "number" ? value : 1), [isRTL]);
  const isSwipeValid = React10.useCallback((offset) => {
    const { state: { currentIndex }, props: { carousel, slides } } = refs.current;
    return !(carousel.finite && (rtl(offset) > 0 && currentIndex === 0 || rtl(offset) < 0 && currentIndex === slides.length - 1));
  }, [rtl]);
  const swipe = React10.useCallback((direction, count = 1) => {
    var _a;
    const { current } = refs;
    const slidesCount = current.props.slides.length;
    const swipeAnimationDuration = current.props.animation.swipe;
    const { currentIndex, globalIndex } = current.state;
    const { swipeOffset } = current;
    let newSwipeState = "swipe-animation";
    let newSwipeAnimationDuration = swipeAnimationDuration * count;
    if (!direction) {
      const containerWidth = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth;
      const elapsedTime = current.swipeStartTime ? Date.now() - current.swipeStartTime : 0;
      const expectedTime = containerWidth ? swipeAnimationDuration / containerWidth * Math.abs(swipeOffset) : swipeAnimationDuration;
      if (containerWidth && (swipeOffset !== 0 && elapsedTime < swipeAnimationDuration || Math.abs(swipeOffset) > 0.5 * containerWidth)) {
        newSwipeAnimationDuration = swipeAnimationDuration / containerWidth * (containerWidth - Math.abs(swipeOffset));
        if (elapsedTime < expectedTime) {
          newSwipeAnimationDuration = newSwipeAnimationDuration / expectedTime * Math.max(elapsedTime, expectedTime / 5);
        }
        direction = rtl(swipeOffset) > 0 ? "prev" : "next";
      } else {
        newSwipeAnimationDuration = swipeAnimationDuration / 2;
      }
    }
    const newState = {};
    if (direction === "prev") {
      if (isSwipeValid(rtl(1))) {
        newState.currentIndex = (currentIndex - count + slidesCount) % slidesCount;
        newState.globalIndex = globalIndex - count;
      } else {
        newSwipeState = void 0;
        newSwipeAnimationDuration = swipeAnimationDuration;
      }
    } else if (direction === "next") {
      if (isSwipeValid(rtl(-1))) {
        newState.currentIndex = (currentIndex + count) % slidesCount;
        newState.globalIndex = globalIndex + count;
      } else {
        newSwipeState = void 0;
        newSwipeAnimationDuration = swipeAnimationDuration;
      }
    }
    newSwipeAnimationDuration = Math.round(newSwipeAnimationDuration);
    resetSwipe();
    current.swipeState = newSwipeState;
    current.swipeAnimationDuration = newSwipeAnimationDuration;
    if (newSwipeState) {
      setTimeout(() => {
        current.swipeState = void 0;
        current.swipeAnimationDuration = current.props.animation.swipe;
        rerender();
      }, newSwipeAnimationDuration);
    }
    publish("controller-swipe", { ...newState, animationDuration: current.swipeAnimationDuration });
    setState((prev) => ({ ...prev, ...newState }));
  }, [setTimeout, resetSwipe, isSwipeValid, rerender, containerRef, rtl, publish]);
  React10.useEffect(() => cleanup(subscribe("prev", (_, count) => swipe("prev", typeof count === "number" ? count : void 0)), subscribe("next", (_, count) => swipe("next", typeof count === "number" ? count : void 0))), [subscribe, swipe]);
  React10.useEffect(() => subscribeSensors("onKeyUp", (event) => {
    if (event.code === "Escape") {
      publish("close");
    }
  }), [subscribeSensors, publish]);
  React10.useEffect(() => props.controller.closeOnBackdropClick ? subscribe(YARL_EVENT_BACKDROP_CLICK, () => publish("close")) : () => {
  }, [props.controller.closeOnBackdropClick, publish, subscribe]);
  const clearPointer = React10.useCallback((event) => {
    const { current } = refs;
    if (current.activePointer === event.pointerId) {
      current.activePointer = void 0;
    }
    current.pointers.splice(0, current.pointers.length, ...current.pointers.filter((p) => p.pointerId !== event.pointerId));
  }, []);
  const addPointer = React10.useCallback((event) => {
    clearPointer(event);
    refs.current.pointers.push(event);
  }, [clearPointer]);
  const onPointerDown = React10.useCallback((event) => {
    addPointer(event);
  }, [addPointer]);
  const onPointerMove = React10.useCallback((event) => {
    const { current } = refs;
    const original = current.pointers.find((p) => p.pointerId === event.pointerId);
    if (original) {
      const deltaX = event.clientX - original.clientX;
      const deltaY = event.clientY - original.clientY;
      if (!current.swipeState) {
        if (isSwipeValid(deltaX) && Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > SWIPE_OFFSET_THRESHOLD) {
          addPointer(event);
          current.activePointer = event.pointerId;
          current.swipeStartTime = Date.now();
          current.swipeState = "swipe";
          rerender();
        }
      } else if (current.swipeState === "swipe") {
        if (event.pointerId === current.activePointer) {
          current.swipeOffset = deltaX;
          updateSwipeOffset();
        }
      }
    }
  }, [addPointer, updateSwipeOffset, isSwipeValid, rerender]);
  const onPointerUp = React10.useCallback((event) => {
    const { current } = refs;
    if (current.pointers.find((p) => p.pointerId === event.pointerId) && current.swipeState === "swipe" && current.activePointer === event.pointerId) {
      swipe();
    }
    clearPointer(event);
  }, [clearPointer, swipe]);
  React10.useEffect(() => cleanup(subscribeSensors("onPointerDown", onPointerDown), subscribeSensors("onPointerMove", onPointerMove), subscribeSensors("onPointerUp", onPointerUp), subscribeSensors("onPointerLeave", onPointerUp), subscribeSensors("onPointerCancel", onPointerUp)), [subscribeSensors, onPointerDown, onPointerMove, onPointerUp]);
  const onWheel = React10.useCallback((event) => {
    var _a;
    if (event.ctrlKey) {
      return;
    }
    if (Math.abs(event.deltaY) > Math.abs(event.deltaX)) {
      return;
    }
    const { current } = refs;
    if (!current.swipeState) {
      if (Math.abs(event.deltaX) <= 1.2 * Math.abs(current.wheelResidualMomentum)) {
        current.wheelResidualMomentum = event.deltaX;
        return;
      }
      if (!isSwipeValid(-event.deltaX)) {
        return;
      }
      current.swipeIntent += event.deltaX;
      clearTimeout(current.swipeIntentCleanup);
      if (Math.abs(current.swipeIntent) > SWIPE_OFFSET_THRESHOLD) {
        current.swipeStartTime = Date.now();
        current.swipeIntent = 0;
        current.wheelResidualMomentum = 0;
        current.swipeState = "swipe";
        rerender();
      } else {
        current.swipeIntentCleanup = setTimeout(() => {
          current.swipeIntent = 0;
          current.swipeIntentCleanup = void 0;
        }, current.props.animation.swipe);
      }
    } else if (current.swipeState === "swipe") {
      const containerWidth = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth;
      if (containerWidth) {
        current.swipeOffset -= event.deltaX;
        current.swipeOffset = Math.min(Math.abs(current.swipeOffset), containerWidth) * Math.sign(current.swipeOffset);
        updateSwipeOffset();
        clearTimeout(current.swipeResetCleanup);
        if (Math.abs(current.swipeOffset) > 0.2 * containerWidth) {
          current.wheelResidualMomentum = event.deltaX;
          swipe();
          return;
        }
        const currentSwipeOffset = current.swipeOffset;
        current.swipeResetCleanup = setTimeout(() => {
          current.swipeResetCleanup = void 0;
          if (current.swipeState === "swipe" && current.swipeOffset === currentSwipeOffset) {
            resetSwipe();
            current.swipeState = void 0;
            rerender();
          }
        }, 2 * current.props.animation.swipe);
      }
    } else {
      current.wheelResidualMomentum = event.deltaX;
    }
  }, [updateSwipeOffset, setTimeout, clearTimeout, swipe, resetSwipe, rerender, isSwipeValid, containerRef]);
  React10.useEffect(() => subscribeSensors("onWheel", onWheel), [subscribeSensors, onWheel]);
  const transferFocus = React10.useCallback(() => {
    var _a;
    return (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
  }, [containerRef]);
  const context = React10.useMemo(() => ({
    latestProps,
    currentIndex: state.currentIndex,
    globalIndex: state.globalIndex,
    subscribeSensors,
    transferFocus,
    containerRect,
    containerRef
  }), [
    latestProps,
    state.currentIndex,
    state.globalIndex,
    subscribeSensors,
    transferFocus,
    containerRect,
    containerRef
  ]);
  return React10.createElement("div", { ref: setContainerRef, className: clsx(cssClass("container"), cssClass("fullsize"), refs.current.swipeState === "swipe" && cssClass("container_swipe")), style: {
    ...refs.current.swipeAnimationDuration !== LightboxDefaultProps.animation.swipe ? {
      [cssVar("swipe_animation_duration")]: `${Math.round(refs.current.swipeAnimationDuration)}ms`
    } : null,
    ...props.controller.touchAction !== "none" ? {
      [cssVar("controller_touch_action")]: props.controller.touchAction
    } : null,
    ...props.styles.container
  }, ...props.controller.aria ? { role: "presentation", "aria-live": "polite" } : null, tabIndex: -1, ...registerSensors }, containerRect && React10.createElement(ControllerContext.Provider, { value: context }, children));
};
var ControllerModule = createModule("controller", Controller);

// node_modules/yet-another-react-lightbox/dist/core/components/IconButton.js
var IconButton = React11.forwardRef(({ label: label2, className, icon: Icon, renderIcon, onClick, style, ...rest }, ref) => {
  const { latestProps: { current: { styles } } } = useController();
  return React11.createElement("button", { ref, type: "button", "aria-label": label2, className: clsx(cssClass("button"), className), onClick, style: { ...style, ...styles.button }, ...rest }, renderIcon ? renderIcon() : React11.createElement(Icon, { className: cssClass("icon"), style: styles.icon }));
});
IconButton.displayName = "IconButton";

// node_modules/yet-another-react-lightbox/dist/core/components/Icons.js
var React12 = __toESM(require_react(), 1);
var createIcon = (name, glyph) => {
  const icon = (props) => React12.createElement(
    "svg",
    { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", width: "24", height: "24", "aria-hidden": "true", focusable: "false", ...props },
    React12.createElement(
      "g",
      { fill: "currentColor" },
      React12.createElement("path", { d: "M0 0h24v24H0z", fill: "none" }),
      glyph
    )
  );
  icon.displayName = name;
  return icon;
};
var CloseIcon = createIcon("Close", React12.createElement("path", { d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" }));
var PreviousIcon = createIcon("Previous", React12.createElement("path", { d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" }));
var NextIcon = createIcon("Next", React12.createElement("path", { d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z" }));
var LoadingIcon = createIcon("Loading", React12.createElement(React12.Fragment, null, Array.from({ length: 8 }).map((_, index, array) => React12.createElement("line", { key: index, x1: "12", y1: "6.5", x2: "12", y2: "1.8", strokeLinecap: "round", strokeWidth: "2.6", stroke: "currentColor", strokeOpacity: 1 / array.length * (index + 1), transform: `rotate(${360 / array.length * index}, 12, 12)` }))));
var ErrorIcon = createIcon("Error", React12.createElement("path", { d: "M21.9,21.9l-8.49-8.49l0,0L3.59,3.59l0,0L2.1,2.1L0.69,3.51L3,5.83V19c0,1.1,0.9,2,2,2h13.17l2.31,2.31L21.9,21.9z M5,18 l3.5-4.5l2.5,3.01L12.17,15l3,3H5z M21,18.17L5.83,3H19c1.1,0,2,0.9,2,2V18.17z" }));

// node_modules/yet-another-react-lightbox/dist/core/components/ImageSlide.js
var React13 = __toESM(require_react(), 1);
var ImageSlide = ({ slide: image, offset, render, rect, imageFit, onClick }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const [status, setStatus] = React13.useState(SLIDE_STATUS_LOADING);
  const latestStatus = useLatest(status);
  const { publish } = useEvents();
  const imageRef = React13.useRef(null);
  React13.useEffect(() => {
    if (offset === 0) {
      publish(activeSlideStatus(status));
    }
  }, [offset, status, publish]);
  const handleLoading = React13.useCallback((img) => {
    if (latestStatus.current === SLIDE_STATUS_COMPLETE) {
      return;
    }
    ("decode" in img ? img.decode() : Promise.resolve()).catch(() => {
    }).then(() => {
      if (!img.parentNode) {
        return;
      }
      setStatus(SLIDE_STATUS_COMPLETE);
    });
  }, [latestStatus]);
  const setImageRef = React13.useCallback((img) => {
    imageRef.current = img;
    if (img === null || img === void 0 ? void 0 : img.complete) {
      handleLoading(img);
    }
  }, [handleLoading]);
  const onLoad = React13.useCallback((event) => {
    handleLoading(event.currentTarget);
  }, [handleLoading]);
  const onError = React13.useCallback(() => {
    setStatus(SLIDE_STATUS_ERROR);
  }, []);
  const cover = image.imageFit === "cover" || image.imageFit !== "contain" && imageFit === "cover";
  const nonInfinite = (value, fallback) => Number.isFinite(value) ? value : fallback;
  const maxWidth = nonInfinite(Math.max(...((_b = (_a = image.srcSet) === null || _a === void 0 ? void 0 : _a.map((x) => x.width)) !== null && _b !== void 0 ? _b : []).concat(image.width ? [image.width] : [])), ((_c = imageRef.current) === null || _c === void 0 ? void 0 : _c.naturalWidth) || 0);
  const maxHeight = nonInfinite(Math.max(...((_e = (_d = image.srcSet) === null || _d === void 0 ? void 0 : _d.map((x) => x.height).filter((x) => Boolean(x))) !== null && _e !== void 0 ? _e : []).concat(image.height ? [image.height] : [])), (image.aspectRatio && maxWidth ? maxWidth / image.aspectRatio : (_f = imageRef.current) === null || _f === void 0 ? void 0 : _f.naturalHeight) || 0);
  const style = maxWidth && maxHeight ? {
    maxWidth: `min(${maxWidth}px, 100%)`,
    maxHeight: `min(${maxHeight}px, 100%)`
  } : {
    maxWidth: "100%",
    maxHeight: "100%"
  };
  const srcSet = (_g = image.srcSet) === null || _g === void 0 ? void 0 : _g.sort((a, b) => a.width - b.width).map((item) => `${item.src} ${item.width}w`).join(", ");
  const estimateActualWidth = () => {
    if (rect && !cover) {
      if (image.width && image.height) {
        return rect.height / image.height * image.width;
      }
      if (image.aspectRatio) {
        return rect.height * image.aspectRatio;
      }
    }
    return Number.MAX_VALUE;
  };
  const sizes = srcSet && rect && hasWindow() ? `${Math.round(Math.min(estimateActualWidth(), rect.width))}px` : void 0;
  return React13.createElement(
    React13.Fragment,
    null,
    React13.createElement("img", { ref: setImageRef, onLoad, onError, onClick, className: clsx(cssClass("slide_image"), cover && cssClass("slide_image_cover"), status !== SLIDE_STATUS_COMPLETE && cssClass("slide_image_loading")), draggable: false, alt: image.alt, style, sizes, srcSet, src: image.src }),
    status !== SLIDE_STATUS_COMPLETE && React13.createElement(
      "div",
      { className: cssClass("slide_placeholder") },
      status === SLIDE_STATUS_LOADING && ((render === null || render === void 0 ? void 0 : render.iconLoading) ? render.iconLoading() : React13.createElement(LoadingIcon, { className: clsx(cssClass("icon"), cssClass("slide_loading")) })),
      status === SLIDE_STATUS_ERROR && ((render === null || render === void 0 ? void 0 : render.iconError) ? render.iconError() : React13.createElement(ErrorIcon, { className: clsx(cssClass("icon"), cssClass("slide_error")) }))
    )
  );
};

// node_modules/yet-another-react-lightbox/dist/core/modules/Carousel.js
var React14 = __toESM(require_react(), 1);
var CarouselSlide = ({ slide, offset }) => {
  const { setContainerRef, containerRect, containerRef } = useContainerRect();
  const { publish } = useEvents();
  const { latestProps, currentIndex } = useController();
  const { render } = latestProps.current;
  const renderSlide = (rect) => {
    var _a, _b, _c, _d;
    let rendered = (_a = render.slide) === null || _a === void 0 ? void 0 : _a.call(render, slide, offset, rect);
    if (!rendered && "src" in slide) {
      rendered = React14.createElement(ImageSlide, { slide, offset, render, rect, imageFit: latestProps.current.carousel.imageFit, onClick: latestProps.current.on.click && offset === 0 ? () => {
        var _a2, _b2;
        (_b2 = (_a2 = latestProps.current.on).click) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, currentIndex);
      } : void 0 });
    }
    return rendered ? React14.createElement(
      React14.Fragment,
      null,
      (_b = render.slideHeader) === null || _b === void 0 ? void 0 : _b.call(render, slide),
      ((_c = render.slideContainer) !== null && _c !== void 0 ? _c : (_, x) => x)(slide, rendered),
      (_d = render.slideFooter) === null || _d === void 0 ? void 0 : _d.call(render, slide)
    ) : null;
  };
  const handleBackdropClick = (event) => {
    const container = containerRef.current;
    const target = event.target instanceof HTMLElement ? event.target : void 0;
    if (target && container && (target === container || Array.from(container.children).find((x) => x === target) && target.classList.contains(cssClass("fullsize")))) {
      publish(YARL_EVENT_BACKDROP_CLICK);
    }
  };
  return React14.createElement("div", { ref: setContainerRef, className: clsx(cssClass("slide"), cssClass("flex_center")), style: { [cssVar("slide_offset")]: offset }, onClick: handleBackdropClick }, containerRect && renderSlide(containerRect));
};
var Carousel = ({ slides, carousel: { finite, preload, padding, spacing } }) => {
  const { currentIndex, globalIndex } = useController();
  const items = [];
  if ((slides === null || slides === void 0 ? void 0 : slides.length) > 0) {
    for (let i = currentIndex - preload; i < currentIndex; i += 1) {
      if (!finite || i >= 0) {
        items.push(React14.createElement(CarouselSlide, { key: globalIndex + i - currentIndex, slide: slides[(i + preload * slides.length) % slides.length], offset: i - currentIndex }));
      }
    }
    items.push(React14.createElement(CarouselSlide, { key: globalIndex, slide: slides[currentIndex], offset: 0 }));
    for (let i = currentIndex + 1; i <= currentIndex + preload; i += 1) {
      if (!finite || i <= slides.length - 1) {
        items.push(React14.createElement(CarouselSlide, { key: globalIndex + i - currentIndex, slide: slides[i % slides.length], offset: i - currentIndex }));
      }
    }
  }
  const sanitize = (value) => value === 0 || value.trim() === "" || value.trim() === "0" ? "0px" : value;
  return React14.createElement("div", { className: cssClass("carousel"), style: {
    ...padding !== LightboxDefaultProps.carousel.padding ? { [cssVar("carousel_padding")]: sanitize(padding) } : null,
    ...spacing !== LightboxDefaultProps.carousel.spacing ? { [cssVar("carousel_spacing")]: sanitize(spacing) } : null
  } }, items);
};
var CarouselModule = createModule("carousel", Carousel);

// node_modules/yet-another-react-lightbox/dist/core/modules/Core.js
var React15 = __toESM(require_react(), 1);
var Core = ({ children }) => React15.createElement(
  TimeoutsProvider,
  null,
  React15.createElement(EventsProvider, null, children)
);
var CoreModule = createModule("core", Core);

// node_modules/yet-another-react-lightbox/dist/core/modules/Navigation.js
var React16 = __toESM(require_react(), 1);
var NavigationButton = ({ publish, labels, label: label2, icon, renderIcon, action, disabled }) => React16.createElement(IconButton, { label: label(labels, label2), icon, renderIcon, className: cssClass(`navigation_${action}`), disabled, "aria-disabled": disabled, onClick: () => {
  publish(action);
} });
var Navigation = ({ slides, carousel: { finite }, labels, render: { buttonPrev, buttonNext, iconPrev, iconNext } }) => {
  const { currentIndex, subscribeSensors } = useController();
  const { publish } = useEvents();
  const isRTL = useLatest(useRTL());
  React16.useEffect(() => subscribeSensors("onKeyDown", (event) => {
    if (event.key === "ArrowLeft") {
      publish(isRTL.current ? "next" : "prev");
    } else if (event.key === "ArrowRight") {
      publish(isRTL.current ? "prev" : "next");
    }
  }), [subscribeSensors, publish, isRTL]);
  return React16.createElement(
    React16.Fragment,
    null,
    buttonPrev ? buttonPrev() : React16.createElement(NavigationButton, { label: "Previous", action: "prev", icon: PreviousIcon, renderIcon: iconPrev, disabled: finite && currentIndex === 0, labels, publish }),
    buttonNext ? buttonNext() : React16.createElement(NavigationButton, { label: "Next", action: "next", icon: NextIcon, renderIcon: iconNext, disabled: finite && currentIndex === slides.length - 1, labels, publish })
  );
};
var NavigationModule = createModule("navigation", Navigation);

// node_modules/yet-another-react-lightbox/dist/core/modules/NoScroll.js
var React17 = __toESM(require_react(), 1);
var noScroll = cssClass("no_scroll");
var noScrollPadding = cssClass("no_scroll_padding");
var isHTMLElement = (element) => "style" in element;
var padScrollbar = (element, padding, rtl) => {
  const styles = window.getComputedStyle(element);
  const property = rtl ? "padding-left" : "padding-right";
  const computedValue = rtl ? styles.paddingLeft : styles.paddingRight;
  const originalValue = element.style.getPropertyValue(property);
  element.style.setProperty(property, `${(parseInt(computedValue, 10) || 0) + padding}px`);
  return () => {
    if (originalValue) {
      element.style.setProperty(property, originalValue);
    } else {
      element.style.removeProperty(property);
    }
  };
};
var NoScroll = ({ children }) => {
  const rtl = useRTL();
  useLayoutEffect2(() => {
    const cleanup2 = [];
    const { body, documentElement } = document;
    const scrollbar = Math.round(window.innerWidth - documentElement.clientWidth);
    if (scrollbar > 0) {
      cleanup2.push(padScrollbar(body, scrollbar, rtl));
      const elements = body.getElementsByTagName("*");
      for (let i = 0; i < elements.length; i += 1) {
        const element = elements[i];
        if (isHTMLElement(element) && window.getComputedStyle(element).getPropertyValue("position") === "fixed" && !element.classList.contains(noScrollPadding)) {
          cleanup2.push(padScrollbar(element, scrollbar, rtl));
        }
      }
    }
    body.classList.add(noScroll);
    return () => {
      body.classList.remove(noScroll);
      cleanup2.forEach((clean) => clean());
    };
  }, [rtl]);
  return React17.createElement(React17.Fragment, null, children);
};
var NoScrollModule = createModule("no-scroll", NoScroll);

// node_modules/yet-another-react-lightbox/dist/core/modules/Portal.js
var React18 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var setAttribute = (element, attribute, value) => {
  const previousValue = element.getAttribute(attribute);
  element.setAttribute(attribute, value);
  return () => {
    if (previousValue) {
      element.setAttribute(attribute, previousValue);
    } else {
      element.removeAttribute(attribute);
    }
  };
};
var Portal = ({ children, ...props }) => {
  const [mounted, setMounted] = React18.useState(false);
  const [visible, setVisible] = React18.useState(false);
  const cleanup2 = React18.useRef([]);
  const latestProps = useLatest(props);
  const latestAnimationDuration = useLatest(!useMotionPreference() ? props.animation.fade : 0);
  const { setTimeout } = useTimeouts();
  const { subscribe } = useEvents();
  React18.useEffect(() => {
    setMounted(true);
    return () => setMounted(false);
  }, []);
  React18.useEffect(() => subscribe("close", () => {
    var _a, _b;
    setVisible(false);
    (_b = (_a = latestProps.current.on).exiting) === null || _b === void 0 ? void 0 : _b.call(_a);
    setTimeout(() => {
      var _a2, _b2;
      (_b2 = (_a2 = latestProps.current.on).exited) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      latestProps.current.close();
    }, latestAnimationDuration.current);
  }), [setTimeout, subscribe, latestProps, latestAnimationDuration]);
  const handlePortalRef = React18.useCallback((node) => {
    var _a, _b, _c, _d;
    if (node) {
      node.getBoundingClientRect();
      setVisible(true);
      (_b = (_a = latestProps.current.on).entering) === null || _b === void 0 ? void 0 : _b.call(_a);
      const elements = (_d = (_c = node.parentNode) === null || _c === void 0 ? void 0 : _c.children) !== null && _d !== void 0 ? _d : [];
      for (let i = 0; i < elements.length; i += 1) {
        const element = elements[i];
        if (["TEMPLATE", "SCRIPT", "STYLE"].indexOf(element.tagName) === -1 && element !== node) {
          cleanup2.current.push(setAttribute(element, "inert", "true"));
          cleanup2.current.push(setAttribute(element, "aria-hidden", "true"));
        }
      }
      setTimeout(() => {
        var _a2, _b2;
        (_b2 = (_a2 = latestProps.current.on).entered) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      }, latestAnimationDuration.current);
    } else {
      cleanup2.current.forEach((clean) => clean());
      cleanup2.current = [];
    }
  }, [setTimeout, latestProps, latestAnimationDuration]);
  return mounted ? ReactDOM.createPortal(React18.createElement("div", { ref: handlePortalRef, className: clsx(props.className, cssClass("root"), cssClass("portal"), cssClass("no_scroll_padding"), visible && cssClass("portal_open")), role: "presentation", "aria-live": "polite", style: {
    ...props.animation.fade !== LightboxDefaultProps.animation.fade ? {
      [cssVar("fade_animation_duration")]: `${Math.round(props.animation.fade)}ms`
    } : null,
    ...props.styles.root
  } }, children), document.body) : null;
};
var PortalModule = createModule("portal", Portal);

// node_modules/yet-another-react-lightbox/dist/core/modules/Toolbar.js
var React19 = __toESM(require_react(), 1);
var Toolbar = ({ toolbar: { buttons }, labels, render: { buttonClose, iconClose } }) => {
  const { publish } = useEvents();
  const { setContainerRef, containerRect } = useContainerRect();
  React19.useEffect(() => {
    if (containerRect === null || containerRect === void 0 ? void 0 : containerRect.width) {
      publish("toolbar-width", containerRect.width);
    }
  }, [publish, containerRect === null || containerRect === void 0 ? void 0 : containerRect.width]);
  const renderCloseButton = () => buttonClose ? buttonClose() : React19.createElement(IconButton, { key: "close", label: label(labels, "Close"), icon: CloseIcon, renderIcon: iconClose, onClick: () => publish("close") });
  return React19.createElement("div", { ref: setContainerRef, className: cssClass("toolbar") }, buttons === null || buttons === void 0 ? void 0 : buttons.map((button) => button === "close" ? renderCloseButton() : button));
};
var ToolbarModule = createModule("toolbar", Toolbar);

// node_modules/yet-another-react-lightbox/dist/Lightbox.js
var renderNode = (node, props) => {
  var _a;
  return React20.createElement(node.module.component, { key: node.module.name, ...props }, (_a = node.children) === null || _a === void 0 ? void 0 : _a.map((child) => renderNode(child, props)));
};
var Lightbox = (props) => {
  const { carousel, animation, render, toolbar, controller, on, plugins, ...restProps } = props;
  const { carousel: defaultCarousel, animation: defaultAnimation, render: defaultRender, toolbar: defaultToolbar, controller: defaultController, on: defaultOn, ...restDefaultProps } = LightboxDefaultProps;
  const { config, augmentation } = withPlugins([
    createNode(PortalModule, [
      createNode(NoScrollModule, [
        createNode(ControllerModule, [
          createNode(CarouselModule),
          createNode(ToolbarModule),
          createNode(NavigationModule)
        ])
      ])
    ])
  ], plugins);
  const augmentedProps = augmentation({
    carousel: { ...defaultCarousel, ...carousel },
    animation: { ...defaultAnimation, ...animation },
    render: { ...defaultRender, ...render },
    toolbar: { ...defaultToolbar, ...toolbar },
    controller: { ...defaultController, ...controller },
    on: { ...defaultOn, ...on },
    ...restDefaultProps,
    ...restProps
  });
  if (!augmentedProps.open)
    return null;
  return React20.createElement(React20.Fragment, null, renderNode(createNode(CoreModule, config), augmentedProps));
};

// node_modules/yet-another-react-lightbox/dist/index.js
var dist_default = Lightbox;
export {
  Lightbox,
  LightboxDefaultProps,
  dist_default as default
};
//# sourceMappingURL=yet-another-react-lightbox.js.map
