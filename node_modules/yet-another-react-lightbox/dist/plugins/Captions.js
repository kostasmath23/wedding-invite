import * as React from "react";
import { clsx, cssClass, cssVar, isDefined, makeUseContext } from "../core/utils.js";
import { useEvents } from "../core/contexts/Events.js";
import { createModule } from "../core/index.js";
const defaultTextAlign = "start";
const defaultMaxLines = 3;
const cssPrefix = (className) => cssClass(`slide_${className}`);
const hasTitle = (slide) => "title" in slide ? typeof slide.title === "string" : false;
const hasDescription = (slide) => "description" in slide ? typeof slide.description === "string" : false;
const CaptionsContext = React.createContext(null);
const useCaptions = makeUseContext("useCaptions", "CaptionsContext", CaptionsContext);
const Title = ({ title, styles }) => {
    const { toolbarWidth } = useCaptions();
    return (React.createElement("div", { style: styles.captionsTitleContainer, className: clsx(cssPrefix("captions_container"), cssPrefix("title_container")) },
        React.createElement("div", { style: styles.captionsTitle, className: cssPrefix("title"), ...(toolbarWidth ? { style: { [cssVar("toolbar_width")]: `${toolbarWidth}px` } } : null) }, title)));
};
const Description = ({ description, align, maxLines, styles }) => (React.createElement("div", { style: styles.captionsDescriptionContainer, className: clsx(cssPrefix("captions_container"), cssPrefix("description_container")) },
    React.createElement("div", { className: cssPrefix("description"), style: {
            ...(align !== defaultTextAlign || maxLines !== defaultMaxLines
                ? {
                    style: {
                        [cssVar("slide_description_text_align")]: align,
                        [cssVar("slide_description_max_lines")]: maxLines,
                    },
                }
                : null),
            ...styles.captionsDescription,
        } }, description.split("\n").flatMap((line, index) => [...(index > 0 ? [React.createElement("br", { key: index })] : []), line]))));
export const CaptionsComponent = ({ children }) => {
    const { subscribe } = useEvents();
    const [toolbarWidth, setToolbarWidth] = React.useState();
    React.useEffect(() => subscribe("toolbar-width", (topic, event) => {
        if (!isDefined(event) || typeof event === "number") {
            setToolbarWidth(event);
        }
    }), [subscribe]);
    const context = React.useMemo(() => ({ toolbarWidth }), [toolbarWidth]);
    return React.createElement(CaptionsContext.Provider, { value: context }, children);
};
export const CaptionsModule = createModule("captions", CaptionsComponent);
export const Captions = ({ augment, addParent }) => {
    addParent("controller", CaptionsModule);
    augment(({ render: { slideFooter: renderFooter, ...restRender }, captions, styles, ...restProps }) => ({
        render: {
            slideFooter: (slide) => {
                var _a, _b;
                return (React.createElement(React.Fragment, null, renderFooter === null || renderFooter === void 0 ? void 0 :
                    renderFooter(slide),
                    hasTitle(slide) && React.createElement(Title, { styles: styles, title: slide.title }),
                    hasDescription(slide) && (React.createElement(Description, { styles: styles, description: slide.description, align: (_a = captions === null || captions === void 0 ? void 0 : captions.descriptionTextAlign) !== null && _a !== void 0 ? _a : defaultTextAlign, maxLines: (_b = captions === null || captions === void 0 ? void 0 : captions.descriptionMaxLines) !== null && _b !== void 0 ? _b : defaultMaxLines }))));
            },
            ...restRender,
        },
        styles,
        ...restProps,
    }));
};
export default Captions;
