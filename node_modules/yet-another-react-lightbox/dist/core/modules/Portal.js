import * as React from "react";
import * as ReactDOM from "react-dom";
import { LightboxDefaultProps } from "../../types.js";
import { createModule } from "../config.js";
import { clsx, cssClass, cssVar } from "../utils.js";
import { useLatest, useMotionPreference } from "../hooks/index.js";
import { useEvents, useTimeouts } from "../contexts/index.js";
const setAttribute = (element, attribute, value) => {
    const previousValue = element.getAttribute(attribute);
    element.setAttribute(attribute, value);
    return () => {
        if (previousValue) {
            element.setAttribute(attribute, previousValue);
        }
        else {
            element.removeAttribute(attribute);
        }
    };
};
export const Portal = ({ children, ...props }) => {
    const [mounted, setMounted] = React.useState(false);
    const [visible, setVisible] = React.useState(false);
    const cleanup = React.useRef([]);
    const latestProps = useLatest(props);
    const latestAnimationDuration = useLatest(!useMotionPreference() ? props.animation.fade : 0);
    const { setTimeout } = useTimeouts();
    const { subscribe } = useEvents();
    React.useEffect(() => {
        setMounted(true);
        return () => setMounted(false);
    }, []);
    React.useEffect(() => subscribe("close", () => {
        var _a, _b;
        setVisible(false);
        (_b = (_a = latestProps.current.on).exiting) === null || _b === void 0 ? void 0 : _b.call(_a);
        setTimeout(() => {
            var _a, _b;
            (_b = (_a = latestProps.current.on).exited) === null || _b === void 0 ? void 0 : _b.call(_a);
            latestProps.current.close();
        }, latestAnimationDuration.current);
    }), [setTimeout, subscribe, latestProps, latestAnimationDuration]);
    const handlePortalRef = React.useCallback((node) => {
        var _a, _b, _c, _d;
        if (node) {
            node.getBoundingClientRect();
            setVisible(true);
            (_b = (_a = latestProps.current.on).entering) === null || _b === void 0 ? void 0 : _b.call(_a);
            const elements = (_d = (_c = node.parentNode) === null || _c === void 0 ? void 0 : _c.children) !== null && _d !== void 0 ? _d : [];
            for (let i = 0; i < elements.length; i += 1) {
                const element = elements[i];
                if (["TEMPLATE", "SCRIPT", "STYLE"].indexOf(element.tagName) === -1 && element !== node) {
                    cleanup.current.push(setAttribute(element, "inert", "true"));
                    cleanup.current.push(setAttribute(element, "aria-hidden", "true"));
                }
            }
            setTimeout(() => {
                var _a, _b;
                (_b = (_a = latestProps.current.on).entered) === null || _b === void 0 ? void 0 : _b.call(_a);
            }, latestAnimationDuration.current);
        }
        else {
            cleanup.current.forEach((clean) => clean());
            cleanup.current = [];
        }
    }, [setTimeout, latestProps, latestAnimationDuration]);
    return mounted
        ? ReactDOM.createPortal(React.createElement("div", { ref: handlePortalRef, className: clsx(props.className, cssClass("root"), cssClass("portal"), cssClass("no_scroll_padding"), visible && cssClass("portal_open")), role: "presentation", "aria-live": "polite", style: {
                ...(props.animation.fade !== LightboxDefaultProps.animation.fade
                    ? {
                        [cssVar("fade_animation_duration")]: `${Math.round(props.animation.fade)}ms`,
                    }
                    : null),
                ...props.styles.root,
            } }, children), document.body)
        : null;
};
export const PortalModule = createModule("portal", Portal);
